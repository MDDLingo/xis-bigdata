-- @atlcompiler atl2006
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore
-- @nsURI UML=http://www.eclipse.org/uml2/4.0.0/UML
-- @nsURI Library=http://www.eclipse.org/uml2/2.1.0/UML

module Ecore2UML;
create OUT: UML from IN: Ecore, IN_Library: Library;

rule EPackage2Package {
	from e: Ecore!EPackage
	to
		u: UML!Package (
			name <- e.name,
			packagedElement <- e.eClassifiers
		)
}

rule EClass2Class {
	from e: Ecore!EClass
	to
		u: UML!Class (
			name <- e.name,
			ownedAttribute <- Sequence {
				e.eAttributes,
				e.eReferences->select(e | e.eOpposite.oclIsUndefined())
			}
		)
}

helper def : getMappingType(input : Ecore!ETypedElement) : UML!Type =
if(input.name = 'EString') then Library!PrimitiveType.allInstancesFrom('IN_Library')->any(e|e.name='String')
else if(input.name = 'EBoolean') then Library!PrimitiveType.allInstancesFrom('IN_Library')->any(e|e.name='Boolean')
else if(input.name = 'EInt') then Library!PrimitiveType.allInstancesFrom('IN_Library')->any(e|e.name='Integer')
else if(input.name = 'EDouble') then Library!PrimitiveType.allInstancesFrom('IN_Library')->any(e|e.name='Real')
else OclUndefined
endif endif endif endif;

rule EAttribute2Property {
	from e: Ecore!EAttribute
	to
		u: UML!Property (
			name <- e.name,
			type <- thisModule.getMappingType(e.eType),
			upper <- e.upperBound,
			lower <- e.lowerBound
		)
}

rule EReference2Property {
	from e: Ecore!EReference (e.eOpposite.oclIsUndefined())
	to
		u: UML!Property (
			name <- e.name,
			type <- e.eType,
			upper <- e.upperBound,
			lower <- e.lowerBound
		)
}

rule EReferenceEOpposite2Property {
	from e: Ecore!EReference (not e.eOpposite.oclIsUndefined())
	to
		u: UML!Property (
			name <- e.name,
			upper <- e.upperBound,
			lower <- e.lowerBound,
			association <- thisModule.Association(e, e.eOpposite),
			type <- e.eType
		)
}

unique lazy rule Association {
	from e1: Ecore!EReference, e2: Ecore!EReference
	to
		u: UML!Association (
			memberEnd <- Sequence {e1, e2}
		)
}

rule EDataType2DataType {
	from e: Ecore!EDataType
	to
		u: UML!DataType (
			name <- e.name
		)
}
